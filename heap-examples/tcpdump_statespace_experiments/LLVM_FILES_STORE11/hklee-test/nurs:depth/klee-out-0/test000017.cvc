n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A-data-stat1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout-stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
model_version3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg04  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg15  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr27  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000003,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000001)
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A-data-stat1[0x0000000B] @ (A-data-stat1[0x0000000A] @ (A-data-stat1[0x00000009] @ A-data-stat1[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A-data-stat1[0x0000003F] @ (A-data-stat1[0x0000003E] @ (A-data-stat1[0x0000003D] @ (A-data-stat1[0x0000003C] @ (A-data-stat1[0x0000003B] @ (A-data-stat1[0x0000003A] @ (A-data-stat1[0x00000039] @ A-data-stat1[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout-stat2[0x0000000B] @ (stdout-stat2[0x0000000A] @ (stdout-stat2[0x00000009] @ stdout-stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout-stat2[0x0000003F] @ (stdout-stat2[0x0000003E] @ (stdout-stat2[0x0000003D] @ (stdout-stat2[0x0000003C] @ (stdout-stat2[0x0000003B] @ (stdout-stat2[0x0000003A] @ (stdout-stat2[0x00000039] @ stdout-stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ((((0x01 = model_version3[0x00000000]
) AND (0x00 = model_version3[0x00000001]
)
) AND (0x00 = model_version3[0x00000002]
)
) AND (0x00 = model_version3[0x00000003]
)
) );
ASSERT( (0x2D = arg04[0x00000000]
) );
ASSERT( ( NOT( (0x00 = arg04[0x00000001]
))) );
ASSERT( ( NOT( (0x2D = arg04[0x00000001]
))) );
ASSERT( (LET let_k_0 = BVSX(arg04[0x00000001],32)
,
let_k_1 = let_k_0[7:0] IN 
(0x00000043 = IF((0b1 = let_k_0[7:7]
))
THEN (0xFFFFFF @ let_k_1
)
ELSE (0x000000 @ let_k_1
)
ENDIF
))  );
ASSERT( (0x2D = arg04[0x00000002]
) );
ASSERT( BVGT(0x0A,BVPLUS(8, 
0xD0, 
arg04[0x00000003])
)
 );
ASSERT( BVGT(0x0A,BVPLUS(8, 
0xD0, 
arg04[0x00000004])
)
 );
ASSERT( BVGT(0x0A,BVPLUS(8, 
0xD0, 
arg04[0x00000005])
)
 );
ASSERT( BVGT(0x0A,BVPLUS(8, 
0xD0, 
arg04[0x00000006])
)
 );
ASSERT( BVGT(0x0A,BVPLUS(8, 
0xD0, 
arg04[0x00000007])
)
 );
ASSERT( BVGT(0x0A,BVPLUS(8, 
0xD0, 
arg04[0x00000008])
)
 );
ASSERT( BVGT(0x0A,BVPLUS(8, 
0xD0, 
arg04[0x00000009])
)
 );
ASSERT( (LET let_k_0 = (0x00000000000000 @ BVPLUS(8, 
0xD0, 
arg04[0x00000003])

),
let_k_1 = BVPLUS(64, 
(0x00000000000000 @ BVPLUS(8, 
0xD0, 
arg04[0x00000004])

), 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
)
,
let_k_2 = BVPLUS(64, 
(0x00000000000000 @ BVPLUS(8, 
0xD0, 
arg04[0x00000005])

), 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
)
,
let_k_3 = BVPLUS(64, 
(0x00000000000000 @ BVPLUS(8, 
0xD0, 
arg04[0x00000006])

), 
BVPLUS(64, 
(let_k_2[60:0] @ 0b000
), 
(let_k_2[62:0] @ 0b0
))
)
,
let_k_4 = BVPLUS(64, 
(0x00000000000000 @ BVPLUS(8, 
0xD0, 
arg04[0x00000007])

), 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
)
,
let_k_5 = BVPLUS(64, 
(0x00000000000000 @ BVPLUS(8, 
0xD0, 
arg04[0x00000008])

), 
BVPLUS(64, 
(let_k_4[60:0] @ 0b000
), 
(let_k_4[62:0] @ 0b0
))
)
 IN 
SBVGT(0x00000000,( BVUMINUS( BVPLUS(64, 
(0x00000000000000 @ BVPLUS(8, 
0xD0, 
arg04[0x00000009])

), 
BVPLUS(64, 
(let_k_5[60:0] @ 0b000
), 
(let_k_5[62:0] @ 0b0
))
)
))[31:0])
)  );
%----------------------------------------------------
QUERY( FALSE  );
