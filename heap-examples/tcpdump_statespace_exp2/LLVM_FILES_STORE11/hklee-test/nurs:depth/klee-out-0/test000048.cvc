A-data-stat0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
model_version1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A-data2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr13  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr24  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr35  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr46  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr57  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr68  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr79  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1010  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr811  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr912  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1113  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1214  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1515  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1316  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1417  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1618  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1719  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1820  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1921  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2222  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2023  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2124  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2325  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2426  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2627  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2528  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2929  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2730  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2831  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3032  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3133  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3234  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3335  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3536  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3637  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3738  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3839  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3940  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4041  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4142  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4443  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4344  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3445  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4846  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4947  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5148  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5249  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5350  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5451  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5552  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5753  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5654  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6055  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6156  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6257  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6358  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6459  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6560  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6661  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6762  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6863  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6964  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7065  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7166  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7267  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7368  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7469  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7570  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7671  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7772  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7873  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7974  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8075  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8276  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8377  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8478  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8679  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8780  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8881  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8982  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9083  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4284  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4585  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9286  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4787  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4688  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9689  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8190  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9791  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10092  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9893  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10194  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10395  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10296  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10497  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10698  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr10599  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr110100  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr115101  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr116102  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr117103  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr118104  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr119105  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr120106  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr121107  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr122108  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr123109  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr124110  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr125111  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr126112  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr127113  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr128114  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr129115  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr131116  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr133117  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr132118  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr134119  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr135120  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr136121  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr137122  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr138123  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr141124  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr142125  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr143126  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr144127  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr146128  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr147129  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr50130  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr148131  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr149132  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr150133  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr151134  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr152135  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr114136  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr113137  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr112138  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr58139  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr59140  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr91141  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr85142  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A-data-stat0[0x0000000B] @ (A-data-stat0[0x0000000A] @ (A-data-stat0[0x00000009] @ A-data-stat0[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A-data-stat0[0x0000003F] @ (A-data-stat0[0x0000003E] @ (A-data-stat0[0x0000003D] @ (A-data-stat0[0x0000003C] @ (A-data-stat0[0x0000003B] @ (A-data-stat0[0x0000003A] @ (A-data-stat0[0x00000039] @ A-data-stat0[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ((((0x01 = model_version1[0x00000000]
) AND (0x00 = model_version1[0x00000001]
)
) AND (0x00 = model_version1[0x00000002]
)
) AND (0x00 = model_version1[0x00000003]
)
) );
ASSERT( ( NOT( (0x2 = A-data-stat0[0x00000019][7:4]
))) );
ASSERT( ((((0x0A = A-data2[0x00000000]
) AND (0x0D = A-data2[0x00000001]
)
) AND (0x0D = A-data2[0x00000002]
)
) AND (0x0A = A-data2[0x00000003]
)
) );
ASSERT( ((((0x4D = A-data2[0x00000008]
) AND (0x3C = A-data2[0x00000009]
)
) AND (0x2B = A-data2[0x0000000A]
)
) AND (0x1A = A-data2[0x0000000B]
)
) );
ASSERT( ( NOT( BVGT(0x0000001C,(A-data2[0x00000007] @ (A-data2[0x00000006] @ (A-data2[0x00000005] @ A-data2[0x00000004]
)
)
))
)) );
ASSERT( ( NOT( BVGT((A-data2[0x00000007] @ (A-data2[0x00000006] @ (A-data2[0x00000005] @ A-data2[0x00000004]
)
)
),0x00000800)
)) );
ASSERT( (LET let_k_0 = BVPLUS(64, 
0xFFFFFFFFFFFFFFF4, 
(0x00000000 @ (A-data2[0x00000007] @ (A-data2[0x00000006] @ (A-data2[0x00000005] @ A-data2[0x00000004]
)
)
)
))
,
let_k_1 = IF(SBVGT(0x0000000000000000,let_k_0)
)
THEN 0x7FFFFFFFFFFFFFFF
ELSE let_k_0
ENDIF IN 
(0x0000000000000010 = IF(BVGT(BVPLUS(64, 
0x000000000000000C, 
let_k_1)
,0x0000000000000064)
)
THEN 0x0000000000000058
ELSE let_k_1
ENDIF
))  );
ASSERT( ((0x01 = A-data2[0x0000000C]
) AND (0x00 = A-data2[0x0000000D]
)
) );
ASSERT( ( NOT( BVGT((A-data2[0x00000023] @ (A-data2[0x00000022] @ (A-data2[0x00000021] @ A-data2[0x00000020]
)
)
),0x01000000)
)) );
ASSERT( ( NOT( BVGT(0x0000000C,(A-data2[0x00000023] @ (A-data2[0x00000022] @ (A-data2[0x00000021] @ A-data2[0x00000020]
)
)
))
)) );
ASSERT( ( NOT( BVGT((A-data2[0x00000023] @ (A-data2[0x00000022] @ (A-data2[0x00000021] @ A-data2[0x00000020]
)
)
),0x00000800)
)) );
ASSERT( (LET let_k_0 = BVPLUS(64, 
0xFFFFFFFFFFFFFFF8, 
(0x00000000 @ (A-data2[0x00000023] @ (A-data2[0x00000022] @ (A-data2[0x00000021] @ A-data2[0x00000020]
)
)
)
))
,
let_k_1 = IF(SBVGT(0x0000000000000000,let_k_0)
)
THEN 0x7FFFFFFFFFFFFFFF
ELSE let_k_0
ENDIF IN 
(0x0000000000000004 = IF(BVGT(BVPLUS(64, 
0x0000000000000024, 
let_k_1)
,0x0000000000000064)
)
THEN 0x0000000000000040
ELSE let_k_1
ENDIF
))  );
ASSERT( ((((0x01 = A-data2[0x0000001C]
) AND (0x00 = A-data2[0x0000001D]
)
) AND (0x00 = A-data2[0x0000001E]
)
) AND (0x00 = A-data2[0x0000001F]
)
) );
%----------------------------------------------------
QUERY( FALSE  );
